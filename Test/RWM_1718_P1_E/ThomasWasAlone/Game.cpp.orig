#include "stdafx.h"

#include <iostream>
using namespace std;



#include "LTimer.h"
#include "SpinningBox.h"
#include "Game.h"
#include "Player.h"
#include "Portal.h"
#include "Level.h"
#include "GameOverScreen.h"

int width = 800;
int height = 600;
const int SCREEN_FPS = 100;
const int SCREEN_TICKS_PER_FRAME = 1000 / SCREEN_FPS;

Game::Game()
{
	pause = false;
	quit = false;
	//setting the current state to start
	//this will let the game open with the starting screen
	gamestate.currentState = gameStates::START;
	inputManager.states = &gamestate;
}


Game::~Game()
{
}


bool Game::init() 
{
	Size2D winSize(800, 600);

	//creates our renderer, which looks after drawing and the window
	renderer.init(winSize,"Simple SDL App");

	//instantiates the game over and start screens seperately, as they're not part of the standard game objects
	//renderer is passed to load in textures and fonts
	gameOverScreen = new GameOverScreen(renderer);
	startScreen = new startscreen(renderer);
	//set up the viewport
	//we want the vp centred on origin and 20 units wide
	float aspectRatio = winSize.w / winSize.h;
	//float vpWidth = 20;
	float vpWidth = 800;
	//previous value
	//float worldUnit = 20.5f;
	float worldUnit = 20.0f;
	Size2D vpSize(vpWidth, vpWidth / aspectRatio);
	//Point2D vpBottomLeft( -vpSize.w / 2, -vpSize.h / 2);

	Rect vpRect(Point2D(0, 0), vpSize);
	//renderer.setViewPort(vpRect);



	//create some game objects
	level.init(worldUnit);

	level.setupLevel(gameObjects);

	player = new Player(Rect(310, 0, worldUnit, worldUnit * 2)); //((2 * vpSize.h) / 3) - worldUnit * 2, worldUnit, worldUnit * 2));
	//portal = new Portal(Rect(450, ((2 * vpSize.h) / 3) - worldUnit * 2, worldUnit, worldUnit * 2));
	//portal->Portalcolour = Colour(122, 155, 255);

	//gameObjects.push_back(player);
	//gameObjects.push_back(portal);

	player->init();
	player->colour = Colour(240, 100, 10);
	//gameObjects.push_(player);

<<<<<<< HEAD
=======
	fader = new Fade(Rect(0, 0, 800, 600));
	fader->colour = Colour(0, 0, 0, 0);
	//removed the game over screen, the start screen shall fare a similar fate
>>>>>>> c6cb41d40b028ccdb4b6ce4bf4ec9491cf6968fa

	lastTime = LTimer::gameTime();

	//we want this box to respond to REVERSE event
	//inputManager.AddListener(EventListener::Event::REVERSE, box1);

	//want game loop to pause
	inputManager.AddListener(EventListener::Event::PAUSE, this);
	inputManager.AddListener(EventListener::Event::MOVERIGHT, player);
	inputManager.AddListener(EventListener::Event::MOVELEFT, player);
	inputManager.AddListener(EventListener::Event::NOTMOVINGRIGHT, player);
	inputManager.AddListener(EventListener::Event::NOTMOVINGLEFT, player);
	inputManager.AddListener(EventListener::Event::JUMPHELD, player);
	inputManager.AddListener(EventListener::Event::JUMPRELEASED, player);
	inputManager.AddListener(EventListener::Event::QUIT, this);
	inputManager.AddListener(EventListener::Event::COLLISION, player);
	inputManager.AddListener(EventListener::Event::RESTART, this);
	inputManager.AddListener(EventListener::Event::START, this);
	inputManager.AddListener(EventListener::Event::GAMEOVER, this);

	changeLevel = false;

	return true;
}


void Game::destroy()
{
	//empty out the game object vector before quitting
	for (std::vector<GameObject*>::iterator i = gameObjects.begin(); i != gameObjects.end(); i++)
	{
		delete *i;

	}
	gameObjects.clear();
	delete player;
	renderer.destroy();
}

//** calls update on all game entities*/
void Game::update()
{
	unsigned int currentTime = LTimer::gameTime();//millis since game started
	unsigned int deltaTime = currentTime - lastTime;//time since last update
	//bool levelChange = false;

	//call update on all game objects
	//edit: only updates the game objects when the current state is set to game
	//so objects don't update during the end or start screens
	if (gamestate.currentState == gameStates::GAME)
	{
		for (std::vector<GameObject*>::iterator i = gameObjects.begin(); i != gameObjects.end(); i++)
		{
			// checks collisions between player and platforms
			if ((*i)->type == GameObject::GameObjectType::PLATFORM || (*i)->type == GameObject::GameObjectType::WATER)
			{
				player->CheckCollisions(*i,deltaTime);
			}
			else if ((*i)->type == GameObject::GameObjectType::PORTAL)
			{
				if (player->PortalCollision(*i) == true)
				{
					level.m_currentLevel++;
					level.SwitchLevel();
					changeLevel = true;
				}
			}
		}
		fader->CheckFade(player);
		fader->Update(deltaTime);
		player->Update(deltaTime);
		player->CheckBounds(800, 600);
	}
	
	if (gamestate.currentState == gameStates::GAMEOVER)
	{
		
	}
	//save the curent time for next frame
	lastTime = currentTime;
}

//** calls render on all game entities*/

void Game::render()
{
	renderer.clear(Colour(255,255,255,255));// prepare for new frame
	
	//render every object
	if (gamestate.currentState == gameStates::GAME)
	{
		player->Render(renderer);

		for (std::vector<GameObject*>::iterator i = gameObjects.begin(), e= gameObjects.end(); i != e; i++) {
			(*i)->Render(renderer);
		}

		fader->Render(renderer);
	}
	else if (gamestate.currentState == gameStates::GAMEOVER)
	{
		gameOverScreen->Render(renderer);
	}
	if (gamestate.currentState == gameStates::START)
	{
		startScreen->Render(renderer);

	}
	renderer.present();// display the new frame (swap buffers)
}

/** update and render game entities*/
void Game::loop()
{
	LTimer capTimer;//to cap framerate

	int frameNum = 0;
	while (!quit) { //game loop
		capTimer.start();

		inputManager.ProcessInput();

		if (changeLevel == true) {
			level.setupLevel(gameObjects);
			player->setPos(level.newPlayerPos);
			changeLevel = false;
		}

		if(!pause) //in pause mode don't bother updateing
			update();
		render();

		int frameTicks = capTimer.getTicks();//time since start of frame
		if (frameTicks < SCREEN_TICKS_PER_FRAME)
		{
			//Wait remaining time before going to next frame
			SDL_Delay(SCREEN_TICKS_PER_FRAME - frameTicks);
		}
	}
}

void Game::onEvent(EventListener::Event evt) {
	if (evt == EventListener::Event::PAUSE) 
	{
		pause = !pause;
	}
	
	if (evt == EventListener::Event::QUIT) 
	{
		quit=true;
	}

	if (evt == EventListener::Event::COLLISION)
	{
		// log collision
	}

	if (gamestate.currentState == gameStates::GAMEOVER)
	{
		if (evt == EventListener::Event::QUIT) {
			quit=true;
		}
		if (evt == EventListener::Event::RESTART)
		{
			gamestate.currentState = gameStates::START;
		}
	}
	if (gamestate.currentState == gameStates::START)
	{
		if (evt == EventListener::Event::START)
		{
		gamestate.currentState = gameStates::GAME;
		}
		if (evt == EventListener::Event::GAMEOVER)
		{
			gamestate.currentState = gameStates::GAMEOVER;

		}


	}
}
